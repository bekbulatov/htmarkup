#include <string.h>
#include <sys/types.h>
#include "stringutils.hpp"

size_t
base64_encode (const u_char *s, size_t len, u_char *d)
{
  u_char *_d = d;
  static u_char   basis64[] =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

  while (len > 2) {
    *d++ = basis64[ (s[0] >> 2) & 0x3f];
    *d++ = basis64[ ( (s[0] & 3) << 4) | (s[1] >> 4) ];
    *d++ = basis64[ ( (s[1] & 0x0f) << 2) | (s[2] >> 6) ];
    *d++ = basis64[s[2] & 0x3f];

    s += 3;
    len -= 3;
  }

  if (len) {
    *d++ = basis64[ (s[0] >> 2) & 0x3f];

    if (len == 1) {
      *d++ = basis64[ (s[0] & 3) << 4];
      *d++ = '=';

    }
    else {
      *d++ = basis64[ ( (s[0] & 3) << 4) | (s[1] >> 4) ];
      *d++ = basis64[ (s[1] & 0x0f) << 2];
    }

    *d++ = '=';
  }

  return (d - _d);
}

size_t
base64_decode(const u_char *s, u_char *d, size_t slen /* = (size_t)-1 */)
{
    u_char *_d = d;
    size_t          len;
    static u_char   basis64[] = {
        77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
        77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
        77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 62, 77, 77, 77, 63,
        52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 77, 77, 77, 77, 77, 77,
        77,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 77, 77, 77, 77, 77,
        77, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
        41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 77, 77, 77, 77, 77,

        77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
        77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
        77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
        77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
        77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
        77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
        77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
        77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77
    };
    
    if (slen == (size_t)-1)
        slen = strlen((const char *)s);

    for (len = 0; len < slen; len++) {
        if (s[len] == '=') 
            break;
        if (basis64[s[len]] == 77) 
            return size_t(-1);
    }

    if (len % 4 == 1) 
        return size_t(-1);

    while (len > 3) {
        *d++ = (u_char) (basis64[s[0]] << 2 | basis64[s[1]] >> 4);
        *d++ = (u_char) (basis64[s[1]] << 4 | basis64[s[2]] >> 2);
        *d++ = (u_char) (basis64[s[2]] << 6 | basis64[s[3]]);

        s += 4;
        len -= 4;
    }

    if (len > 1) {
        *d++ = (u_char) (basis64[s[0]] << 2 | basis64[s[1]] >> 4);
    }

    if (len > 2) {
        *d++ = (u_char) (basis64[s[1]] << 4 | basis64[s[2]] >> 2);
    }

    *d = '\0';
    return (d - _d);
}

